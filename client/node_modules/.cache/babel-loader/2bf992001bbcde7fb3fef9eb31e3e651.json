{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useCallback } from 'react';\nimport { useAppContext } from '../context/context';\nimport { mergeArrays } from '../utils/mergeArr';\nimport axios from 'axios';\nexport default function useFetchData({\n  url,\n  options = {\n    disable: false\n  }\n}) {\n  _s();\n\n  const [{\n    products,\n    favoriteProducts\n  }, dispatch] = useAppContext();\n  const isDisabled = options.disable;\n  const fetchData = useCallback(async () => {\n    try {\n      const res = await axios.get(url);\n      const data = res.data;\n      const basicData = data.map(el => {\n        return { ...el,\n          amount: 1,\n          isFavorite: false\n        };\n      });\n      const finalData = mergeArrays(basicData, favoriteProducts);\n      dispatch({\n        type: 'DISPLAY_PRODUCTS',\n        payload: finalData\n      });\n    } catch (err) {\n      console.log(err);\n      dispatch({\n        type: 'ERROR',\n        payload: 'Oops, something went wrong! Try again later...!'\n      });\n    }\n  }, [url, dispatch, favoriteProducts]);\n  useEffect(() => {\n    dispatch({\n      type: 'LOADING',\n      payload: true\n    });\n\n    if (!isDisabled) {\n      fetchData(url);\n    } else {\n      dispatch({\n        type: 'LOADING',\n        payload: false\n      });\n    }\n  }, [url, dispatch, fetchData, isDisabled]);\n  return products;\n}\n\n_s(useFetchData, \"0mSFnnujW5JCWBP08078G5wzGeA=\", false, function () {\n  return [useAppContext];\n});","map":{"version":3,"sources":["C:/Users/Admin/Desktop/Elena-FooCoding/Foocoding-React-Project-ONLINE-STORE/src/hooks/useFetchData.js"],"names":["useEffect","useCallback","useAppContext","mergeArrays","axios","useFetchData","url","options","disable","products","favoriteProducts","dispatch","isDisabled","fetchData","res","get","data","basicData","map","el","amount","isFavorite","finalData","type","payload","err","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,YAAT,CAAsB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,OAAO,GAAG;AAAEC,IAAAA,OAAO,EAAE;AAAX;AAAjB,CAAtB,EAA6D;AAAA;;AAC1E,QAAM,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,EAAiCC,QAAjC,IAA6CT,aAAa,EAAhE;AACA,QAAMU,UAAU,GAAGL,OAAO,CAACC,OAA3B;AAEA,QAAMK,SAAS,GAAGZ,WAAW,CAAC,YAAY;AACxC,QAAI;AACF,YAAMa,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUT,GAAV,CAAlB;AACA,YAAMU,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACA,YAAMC,SAAS,GAAGD,IAAI,CAACE,GAAL,CAAUC,EAAD,IAAQ;AACjC,eAAO,EACL,GAAGA,EADE;AAELC,UAAAA,MAAM,EAAE,CAFH;AAGLC,UAAAA,UAAU,EAAE;AAHP,SAAP;AAKD,OANiB,CAAlB;AAOA,YAAMC,SAAS,GAAGnB,WAAW,CAACc,SAAD,EAAYP,gBAAZ,CAA7B;AACAC,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,kBADC;AAEPC,QAAAA,OAAO,EAAEF;AAFF,OAAD,CAAR;AAID,KAfD,CAeE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAd,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,OADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AACF,GAvB4B,EAuB1B,CAAClB,GAAD,EAAMK,QAAN,EAAgBD,gBAAhB,CAvB0B,CAA7B;AAyBAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAAC;AACPY,MAAAA,IAAI,EAAE,SADC;AAEPC,MAAAA,OAAO,EAAE;AAFF,KAAD,CAAR;;AAIA,QAAI,CAACZ,UAAL,EAAiB;AACfC,MAAAA,SAAS,CAACP,GAAD,CAAT;AACD,KAFD,MAEO;AACLK,MAAAA,QAAQ,CAAC;AACPY,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID;AACF,GAbQ,EAaN,CAAClB,GAAD,EAAMK,QAAN,EAAgBE,SAAhB,EAA2BD,UAA3B,CAbM,CAAT;AAcA,SAAOH,QAAP;AACD;;GA5CuBJ,Y;UAC6BH,a","sourcesContent":["import { useEffect, useCallback } from 'react';\r\nimport { useAppContext } from '../context/context';\r\nimport { mergeArrays } from '../utils/mergeArr';\r\nimport axios from 'axios';\r\n\r\nexport default function useFetchData({ url, options = { disable: false } }) {\r\n  const [{ products, favoriteProducts }, dispatch] = useAppContext();\r\n  const isDisabled = options.disable;\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const res = await axios.get(url);\r\n      const data = res.data;\r\n      const basicData = data.map((el) => {\r\n        return {\r\n          ...el,\r\n          amount: 1,\r\n          isFavorite: false,\r\n        };\r\n      });\r\n      const finalData = mergeArrays(basicData, favoriteProducts);\r\n      dispatch({\r\n        type: 'DISPLAY_PRODUCTS',\r\n        payload: finalData,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch({\r\n        type: 'ERROR',\r\n        payload: 'Oops, something went wrong! Try again later...!',\r\n      });\r\n    }\r\n  }, [url, dispatch, favoriteProducts]);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: 'LOADING',\r\n      payload: true,\r\n    });\r\n    if (!isDisabled) {\r\n      fetchData(url);\r\n    } else {\r\n      dispatch({\r\n        type: 'LOADING',\r\n        payload: false,\r\n      });\r\n    }\r\n  }, [url, dispatch, fetchData, isDisabled]);\r\n  return products;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}